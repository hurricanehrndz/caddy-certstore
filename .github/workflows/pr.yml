name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Quick validation on Linux
  quick-test:
    name: Quick Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Download tools
        run: go mod download -modfile=tools.mod

      - name: Run unit tests
        env:
          SKIP_KEYCHAIN_TESTS: 1
          SKIP_CERTSTORE_TESTS: 1
        run: go test -v -race ./...

      - name: Build
        run: go build -v ./...

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Download tools
        run: go mod download -modfile=tools.mod

      - name: Run make lint
        run: make lint

      - name: Check formatting
        run: |
          make format
          if [ -n "$(git status --porcelain)" ]; then
            echo "Code is not formatted. Please run 'make format'"
            git diff
            exit 1
          fi

  # Platform integration tests
  integration-tests:
    name: ${{ matrix.os }} Integration
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run integration tests (macOS)
        if: matrix.os == 'macos-latest'
        run: go test -v -race ./...

      - name: Run integration tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: go test -v -race ./...
