name: Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  # Linting with make lint (includes golangci-lint and govulncheck)
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Download tools
        run: go mod download -modfile=tools.mod

      - name: Run make lint
        run: make lint

  # Code formatting check
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Download tools
        run: go mod download -modfile=tools.mod

      - name: Check formatting
        run: |
          make format
          if [ -n "$(git status --porcelain)" ]; then
            echo "Code is not formatted. Please run 'make format'"
            git diff
            exit 1
          fi

  # Dependency check
  dependencies:
    name: Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Check for outdated dependencies
        run: |
          go list -u -m all

      - name: Verify dependencies
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum

  # Test coverage
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests with coverage
        env:
          SKIP_KEYCHAIN_TESTS: 1
          SKIP_CERTSTORE_TESTS: 1
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: coverage

      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 30.0" | bc -l) )); then
            echo "Coverage is below 30%"
            exit 1
          fi
